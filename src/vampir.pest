WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }
identifier = @{ ( 'a'..'z' | 'A'..'Z' | "_" ) ~ ( 'a'..'z' | 'A'..'Z' | "_" | '0'..'9' )* }

whole = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }

// exponents are neither 0 nor 1
exponent = @{ (!"1" ~ ASCII_NONZERO_DIGIT) ~ ASCII_DIGIT* }

// Atomic and immutable data unit for the IR, a wire
wire = @{ identifier }
wire_list = _{ wire+ } // e.g. x y -- no arithmetics allowed

// alias statement defines an alias
alias_definition = { NEWLINE* ~ "def" ~ identifier ~ wire_list ~ ("->" ~ wire_list)? ~ "{" ~ constraint* ~ "}" ~ NEWLINE* }

// alias invocations need to be surrounded by brackets to distinguish them
// from wire identifiers
alias_invocation = { "(" ~ identifier ~ wire_list? ~ ")" }

// operations
plus = { "+" }
minus = { "-" }
times = { "*" }
equals = { "=" }

op = _{ plus | minus | times | equals }

base = { whole | wire | "(" ~ alias_invocation ~ ")" }

exponential = { base ~ "^" ~ exponent }

monomial = { exponential | base }

// an expression is a chain of monomials delimited by an operation
expression = { monomial ~ ( op ~ monomial )* }

// a constraint is an expression on its own line
constraint = { NEWLINE* ~ expression ~ NEWLINE* }

// A circuit is the entire list of constraints
circuit = { SOI ~ constraint+ ~ EOI }