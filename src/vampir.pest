WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

identifier = @{ ( 'a'..'z' | 'A'..'Z' | "_" ) ~ ( 'a'..'z' | 'A'..'Z' | "_" | '0'..'9' )* }
constant = @{ "-"? ~ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }

// Atomic and immutable data unit for the IR, a wire
wire = @{ constant | identifier }
wire_list = { wire+ } // e.g. x y -- no arithmetics allowed

// alias statement defines an alias
alias_definition = { NEWLINE* ~ "def" ~ identifier ~ wire_list ~ ("->" ~ wire_list)? ~ circuit ~ NEWLINE* }

// alias invocations need to be surrounded by brackets to distinguish them
// from wire identifiers
alias_invocation = { "(" ~ identifier ~ wire_list? ~ ")" }

// binary operations
plus = { "+" }
minus = { "-" }
times = { "*" }
power = { "^" }
equals = { "=" }

op = _{ plus | minus | times | power | equals }

primary = { wire | "(" ~ expression ~ ")" }

expression = { NEWLINE* ~ primary ~ ( op ~ primary )* ~ NEWLINE* }

// a circuit is a list of expressions surrounded in curly braces
circuit = { NEWLINE* ~ "{" ~ expression+ ~ "}"  ~ NEWLINE* }

// a preamble is a list of alias definitions
preamble = { alias_definition+ }
